/**
 * Mongoose schema for driver collection.
 * Represents the driver information and the driver's assigned packages.
 *
 * @requires mongoose - The Mongoose library for MongoDB.
 */

const mongoose = require("mongoose");
const Schema = mongoose.Schema;

/**
 * Driver schema definition.
 *
 * @typedef {Object} Driver
 * @property {string} driver_id - The unique identifier for the driver, auto-generated by using a custom function.
 * @property {string} driver_name - The name of the driver, must be between 3 and 20 characters long and alphabets are allowed.
 * @property {string} driver_department - The department to which the driver belongs, can be either "Food", "Furniture" or "Electronics".
 * @property {string} driver_license - Unique license number for the driver, and exactly 5 alphanumeric characters.
 * @property {boolean} driver_isActive - Boolean to represent if the driver is currently active.
 * @property {Date} driver_createdAt - Date when the driver record was created, defaults to the current date.
 * @property {ObjectId[]} assigned_packages - List of package ObjectId references.
 */
const driverSchema = new Schema({
  driver_id: {
    type: String,
    required: true,
    unique: true,
    default: function () {
      const stuID = "32";
      const randomDigits = Math.floor(Math.random() * 90 + 10);
      const randomLetters = Array.from({ length: 3 }, () =>
        String.fromCharCode(Math.floor(Math.random() * 26) + 65)
      ).join("");

      return `D${stuID}-${randomDigits}-${randomLetters}`;
    },
  },

  driver_name: {
    type: String,
    required: true,
    minlength: 3,
    maxlength: 20,
    match: /^[A-Za-z]+$/,
  },

  driver_department: {
    type: String,
    required: true,
    enum: ["Food", "Furniture", "Electronic"],
  },

  driver_license: {
    type: String,
    required: true,
    unique: true,
    minlength: 5,
    maxlength: 5,
    match: /^[A-Za-z0-9]{5}$/,
  },

  driver_isActive: {
    type: Boolean,
    required: true,
  },

  driver_createdAt: {
    type: Date,
    default: Date.now,
  },

  assigned_packages: [
    {
      type: Schema.Types.ObjectId,
      ref: "Package",
    },
  ],
});

module.exports = mongoose.model("Driver", driverSchema);
